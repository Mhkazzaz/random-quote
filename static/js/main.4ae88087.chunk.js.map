{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","setTimeout","$","css","randomDark","require","randomColor","luminosity","useState","color","setColor","count","setCount","quote","setQuote","opacity","author","setAuthor","backgroundStyle","backgroundColor","height","click","addClass","on","this","removeClass","console","log","useEffect","randomNum","Math","floor","random","fetch","then","res","json","data","text","style","className","width","padding","border","class","onClick","type","FacebookShareButton","url","target","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0TAmFeA,MA5Ef,WAEEC,YAAW,kBAAMC,IAAE,cAAcC,IAAI,UAAW,KAAI,KAEpD,IACMC,EADcC,EAAQ,GACTC,CAAY,CAACC,WAAY,SAL/B,EAMaC,mBAASJ,GANtB,mBAMNK,EANM,KAMCC,EAND,OAOaF,mBAAS,GAPtB,mBAONG,EAPM,KAOCC,EAPD,OAQaJ,mBAAS,IARtB,mBAQNK,EARM,KAQCC,EARD,OASiBN,mBAAS,GAT1B,mBASNO,EATM,aAUeP,mBAAS,KAVxB,mBAUNQ,EAVM,KAUEC,EAVF,KAYPC,EAAkB,CAAEC,gBAAiBV,EAAOW,OAAQ,SAqC1D,OAhCAlB,IAAE,UAAUmB,OAAM,WAChBnB,IAAE,KAAKoB,SAAS,cAGlBpB,IAAE,KAAKqB,GACL,gEACA,WACErB,IAAEsB,MAAMC,YAAY,SACpBC,QAAQC,IAAI,oBAQhBC,qBAAU,WACR,IAAMC,EAAYC,KAAKC,MAAsB,KAAhBD,KAAKE,UAElCC,MAAM,gCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJvB,GAAS,SAAAD,GAAK,OAAIwB,EAAKR,GAAWS,QAClCD,EAAKR,GAAWb,OAChBC,GAAU,SAAAD,GAAM,OAAIqB,EAAKR,GAAWb,UAClCC,GAAU,SAAAD,GAAM,MAAI,gBAGxBN,GAAS,SAAAD,GAAK,OAAIL,OACnB,CAACO,IAIF,yBAAK4B,MAAOrB,EAAiBsB,UAAU,iDACrC,yBAAKD,MAtCa,CAAEpB,gBAAiB,QAASsB,MAAO,QAASrB,OAAQ,OAAQsB,QAAS,GAAIC,OAAQ,kBAAmB5B,QAAS,GAsCpGyB,UAAU,0CAEnC,uBAAGD,MAAO,CAAC9B,QAAQM,QAASA,GAAU6B,MAAM,qBAC1C,uBAAGA,MAAM,iCAAoC/B,GAE/C,uBAAG0B,MAAO,CAAE9B,SAAS+B,UAAU,cAA/B,IAA8CxB,GAC9C,6BACE,4BAAQuB,MAAO,CAAEpB,gBAAiBV,GAChCoC,QAAS,WA7BjBjC,GAAS,SAAAD,GAAK,OAAIA,EAAQ,MA8BlBmC,KAAK,SACLF,MAAM,+BAHR,aAMA,kBAACG,EAAA,EAAD,CAAqBC,IAhBpB,2BAgB8BnC,MAAK,UAAKA,EAAL,cAAgBG,IAClD,uBAAG4B,MAAM,0CAA0CL,MAAO,CAAE9B,YAE9D,uBAAGwC,OAAO,SAASX,KAAMzB,EAAOqC,KAAI,gDAA2CrC,EAA3C,aAAqDG,IACvF,uBAAG4B,MAAM,oCAAoCL,MAAO,CAAE9B,gBC/D9C0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.4ae88087.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.scss';\nimport './App.css';\nimport $ from 'jquery';\nimport { FacebookShareButton, TwitterShareButton } from \"react-share\"; \n\nfunction App() {\n\n  setTimeout(() => $(\".quote-box\").css(\"opacity\", 1), 500)\n\n  const randomColor = require('randomcolor');\n  const randomDark = randomColor({luminosity: \"dark\"})\n  const [color, setColor] = useState(randomDark)\n  const [count, setCount] = useState(1)\n  const [quote, setQuote] = useState(\"\")\n  const [opacity, setOpacity] = useState(1)\n  const [author, setAuthor] = useState(\"\")\n\n  const backgroundStyle = { backgroundColor: color, height: \"100vh\" }\n  const quoteBoxStyle = { backgroundColor: \"white\", width: \"500px\", height: \"auto\", padding: 30, border: \"2px solid black\", opacity: 0}\n\n  \n\n  $(\"button\").click(() => {\n    $(\"p\").addClass(\"quote  \")\n  })\n\n  $(\"p\").on(\n    \"webkitAnimationEnd oanimationend msAnimationEnd animationend\",\n    function () {\n      $(this).removeClass(\"quote\")\n      console.log(\"Class Removed\")\n    }\n  );\n  \n  const newQuote = () => {\n    setCount(count => count + 1)\n    }\n\n  useEffect(() => {\n    const randomNum = Math.floor(Math.random() * 1643)\n\n    fetch('https://type.fit/api/quotes/')\n      .then(res => res.json())  \n      .then(data => { \n        setQuote(quote => data[randomNum].text)\n        data[randomNum].author?\n        setAuthor(author => data[randomNum].author)\n        : setAuthor(author => \"Unknown\")\n      })\n\n      setColor(color => randomDark)\n  }, [count]);\n\n  const url = `https://www.facebook.com`\n  return (\n    <div style={backgroundStyle} className=\"App container-fluid d-flex align-items-center\">\n      <div style={quoteBoxStyle} className=\"quote-box container d-flex flex-column\">\n\n        <p style={{color , opacity: opacity}} class=\" text-center mb-4\">\n          <i class=\"fas fa-quote-left fa-2x mr-2\"></i>{quote}\n        </p>\n        <p style={{ color }} className=\"text-right\">-{author}</p>\n        <div>\n          <button style={{ backgroundColor: color }}\n            onClick={() => newQuote()}\n            type=\"button\"\n            class=\"btn btn-primary float-right\">\n            New Quote\n          </button> \n          <FacebookShareButton url={url} quote={`${quote} --${author}`}>\n            <i class=\"fab fa-facebook-square fa-3x icons mr-3\" style={{ color }}></i>\n          </FacebookShareButton>\n          <a target=\"_blank\" text={quote} href={`https://twitter.com/intent/tweet?text=${quote}--${author}`}>\n            <i class=\"fab fa-twitter-square fa-3x icons\" style={{ color }}></i>\n          </a>          \n        </div>   \n      </div>\n    </div>\n  );\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}